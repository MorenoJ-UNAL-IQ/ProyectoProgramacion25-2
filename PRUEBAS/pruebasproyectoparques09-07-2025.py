# -*- coding: utf-8 -*-
"""PruebasProyectoParques.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qohLmexivUzt7FdoOAf7UTKil_CTVqRi
"""

import random

contador_de_turnos = 0


#INICIO DEL JUEGO: Numero de jugadores
while True:
  try:
    jugadores = int(input("¿Cuántos jugadores habrán? (Seleccione de 2-4)"))
    if jugadores >= 2 and jugadores <= 4:
      break
    else:
      print("Debe seleccionar entre 2 y 4 jugadores")
  except ValueError:
    print("Debe ingresar un número")

#determina los colores de los jugadores


lista_de_judadores = ['rojo','azul','amarillo','verde']

if jugadores == 3:

 lista_de_judadores.remove('verde')
 del lista_de_judadores["jugadores"][3]

elif jugadores == 2:

 lista_de_judadores.remove('amarillo')
 del lista_de_judadores["jugadores"][2]

 del lista_de_judadores["jugadores"][3]

#CASILLAS
casillas_juego = 68
seguros = [5, 12, 17, 22, 29, 34, 39, 46, 51, 56, 63]  # Ejemplo
salidas = {'rojo': 5,'verde': 22,'amarillo': 39,'azul': 56}
llegada = {'rojo': list(range(68, 74)),'verde': list(range(74, 80)),'amarillo': list(range(80, 86)),'azul': list(range(86, 92))}

#DADOS
def lanzar_dados():
  dado1 = random.randint(1,6)
  dado2 = random.randint(1,6)
  print("Dado 1: ", dado1)
  print("Dado 2: ", dado2)


lista_de_judadores = {'rojo':4,'azul':4,'amarillo':4,'verde':4}

if jugadores == 3:
 del lista_de_judadores['verde']
elif jugadores == 2:
 del lista_de_judadores['amarillo']

print(lista_de_judadores)

def turnos(lista_de_judadores):

  while len(lista_de_judadores) > 1:

    for i in lista_de_judadores:
      lanzar_dados()
      if dado1 == 5

turnos(lista_de_judadores)

#FICHA
class ficha:

  def ficha(identidad, color)
    identidad.posicion = -1
    identidad.color = color
    identidad.en_llegada = False

  def en_juego(identidad)
    if identidad.posicion == casillas_juego:
      return identidad.posicion != -1
  def mover(identidad, movimientos)
    if identidad.posicion = -1:
      print('Esta ficha sigue en la carcel')
      return False

#SACAR FICHA
def mover(identidad, pasos, tablero):
        if identidad.posicion == -1:
            print(f"{identidad.color} sigue en la cárcel.")
            return False, False

        if identidad.en_llegada:
            index = llegada[identidad.color].index(identidad.posicion)
            if index + pasos < len(llegada[identidad.color]):
                identidad.posicion = llegada[identidad.color][index + pasos]
            elif index + pasos == len(llegada[identidad.color]):
                identidad.posicion = 'fin'
                print(f"{identidad.color} llegó al final.")
            else:
                print("Movimiento inválido en llegada.")
                return False, False
        else:
            nueva_pos = identidad.posicion + pasos
            if nueva_pos >= casillas_juego:
                exceso = nueva_pos - casillas_juego
                if exceso < len(llegada[identidad.color]):
                    if tablero.hay_barrera_entre(identidad.posicion, casillas_juego - 1):
                        print("Bloqueado antes de zona de llegada.")
                        return False, False
                    identidad.posicion = llegada[identidad.color][exceso]
                    identidad.en_llegada = True
                else:
                    print("Número exacto requerido para entrar a llegada.")
                    return False, False
            else:
                if tablero.hay_barrera_entre(identidad.posicion, nueva_pos):
                    print("Movimiento bloqueado por barrera.")
                    return False, False
                identidad.posicion = nueva_pos
                capturada = tablero.verificar_captura(identidad)
                if capturada:
                    print(f"{identidad.color} fue capturada.")
                return True, capturada
        return True, False

#Definicion de jugador
class Jugador:
    def __init__(identidad, color):
        identidad.color = color
        identidad.fichas = [Ficha(color) for _ in range(4)]

    def sacar_ficha(identidad):
        for ficha in identidad.fichas:
            if ficha.posicion == -1:
                ficha.posicion = salidas[identidad.color]
                print(f"Ficha {identidad.color} sale de la cárcel.")
                return True
        print(f"No hay fichas disponibles para sacar.")
        return False

#TABLERO

class Tablero:
    def __init__(self):
        self.casillas = {}

    def hay_barrera(identidad, pos):
        fichas = identidad.casillas.get(pos, [])
        return len(fichas) >= 2 and all(f.color == fichas[0].color for f in fichas)

    def hay_barrera_entre(identidad, inicio, destino):
        if destino < inicio:
            destino += casillas_juego
        for i in range(inicio + 1, destino + 1):
            if identidad.hay_barrera(i % casillas_juego):
                return True
        return False

    def verificar_captura(identidad, ficha):
        pos = ficha.posicion
        if pos in seguros:
            return False
        fichas = identidad.casillas.get(pos, [])
        for f in fichas:
            if f != ficha and f.color != ficha.color:
                f.posicion = -1
                print(f"¡{ficha.color} capturó a {f.color}!")
                return True
        return False
